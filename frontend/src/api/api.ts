/* tslint:disable */
/* eslint-disable */
/**
 * Your API
 * Your API documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ExternalLoginPostRequest
 */
export interface ExternalLoginPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ExternalLoginPostRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof ExternalLoginPostRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface ExternalSignupPostRequest
 */
export interface ExternalSignupPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ExternalSignupPostRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof ExternalSignupPostRequest
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof ExternalSignupPostRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ExternalSignupPostRequest
     */
    'lastname': string;
}
/**
 * 
 * @export
 * @interface ProfessorThesisPost201Response
 */
export interface ProfessorThesisPost201Response {
    /**
     * 
     * @type {string}
     * @memberof ProfessorThesisPost201Response
     */
    'message'?: string;
    /**
     * 
     * @type {Thesis}
     * @memberof ProfessorThesisPost201Response
     */
    'thesis'?: Thesis;
}
/**
 * 
 * @export
 * @interface ProfessorThesisPostRequest
 */
export interface ProfessorThesisPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ProfessorThesisPostRequest
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof ProfessorThesisPostRequest
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfessorThesisPostRequest
     */
    'prerequisites'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProfessorThesisPostRequest
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ProfessorThesisPostRequest
     */
    'university': string;
    /**
     * 
     * @type {string}
     * @memberof ProfessorThesisPostRequest
     */
    'professor': string;
    /**
     * 
     * @type {string}
     * @memberof ProfessorThesisPostRequest
     */
    'creator_student'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfessorThesisPostRequest
     */
    'creator_external'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfessorThesisPostRequest
     */
    'images'?: string;
}
/**
 * 
 * @export
 * @interface Thesis
 */
export interface Thesis {
    /**
     * 
     * @type {string}
     * @memberof Thesis
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Thesis
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Thesis
     */
    'prerequisites'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Thesis
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Thesis
     */
    'university': string;
    /**
     * 
     * @type {string}
     * @memberof Thesis
     */
    'professor': string;
    /**
     * 
     * @type {string}
     * @memberof Thesis
     */
    'creator_student'?: string;
    /**
     * 
     * @type {string}
     * @memberof Thesis
     */
    'creator_external'?: string;
    /**
     * 
     * @type {string}
     * @memberof Thesis
     */
    'images'?: string;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Check authentication
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authCheckGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Check if user is a professor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authIsProfessorGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/is-professor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Check authentication
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authCheckGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authCheckGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authCheckGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Check if user is a professor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authIsProfessorGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authIsProfessorGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authIsProfessorGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary Check authentication
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authCheckGet(options?: any): AxiosPromise<void> {
            return localVarFp.authCheckGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Check if user is a professor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authIsProfessorGet(options?: any): AxiosPromise<void> {
            return localVarFp.authIsProfessorGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary Check authentication
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authCheckGet(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authCheckGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Check if user is a professor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authIsProfessorGet(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authIsProfessorGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ExternalApi - axios parameter creator
 * @export
 */
export const ExternalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary user login
         * @param {ExternalLoginPostRequest} externalLoginPostRequest 
         * @param {string} [authorization] Optional bearer token for authorization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        externalLoginPost: async (externalLoginPostRequest: ExternalLoginPostRequest, authorization?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'externalLoginPostRequest' is not null or undefined
            assertParamExists('externalLoginPost', 'externalLoginPostRequest', externalLoginPostRequest)
            const localVarPath = `/external/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(externalLoginPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Signup a new user
         * @param {ExternalSignupPostRequest} externalSignupPostRequest 
         * @param {string} [authorization] Optional bearer token for authorization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        externalSignupPost: async (externalSignupPostRequest: ExternalSignupPostRequest, authorization?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'externalSignupPostRequest' is not null or undefined
            assertParamExists('externalSignupPost', 'externalSignupPostRequest', externalSignupPostRequest)
            const localVarPath = `/external/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(externalSignupPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExternalApi - functional programming interface
 * @export
 */
export const ExternalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExternalApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary user login
         * @param {ExternalLoginPostRequest} externalLoginPostRequest 
         * @param {string} [authorization] Optional bearer token for authorization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async externalLoginPost(externalLoginPostRequest: ExternalLoginPostRequest, authorization?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.externalLoginPost(externalLoginPostRequest, authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExternalApi.externalLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Signup a new user
         * @param {ExternalSignupPostRequest} externalSignupPostRequest 
         * @param {string} [authorization] Optional bearer token for authorization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async externalSignupPost(externalSignupPostRequest: ExternalSignupPostRequest, authorization?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.externalSignupPost(externalSignupPostRequest, authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExternalApi.externalSignupPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ExternalApi - factory interface
 * @export
 */
export const ExternalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExternalApiFp(configuration)
    return {
        /**
         * 
         * @summary user login
         * @param {ExternalLoginPostRequest} externalLoginPostRequest 
         * @param {string} [authorization] Optional bearer token for authorization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        externalLoginPost(externalLoginPostRequest: ExternalLoginPostRequest, authorization?: string, options?: any): AxiosPromise<void> {
            return localVarFp.externalLoginPost(externalLoginPostRequest, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Signup a new user
         * @param {ExternalSignupPostRequest} externalSignupPostRequest 
         * @param {string} [authorization] Optional bearer token for authorization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        externalSignupPost(externalSignupPostRequest: ExternalSignupPostRequest, authorization?: string, options?: any): AxiosPromise<void> {
            return localVarFp.externalSignupPost(externalSignupPostRequest, authorization, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExternalApi - object-oriented interface
 * @export
 * @class ExternalApi
 * @extends {BaseAPI}
 */
export class ExternalApi extends BaseAPI {
    /**
     * 
     * @summary user login
     * @param {ExternalLoginPostRequest} externalLoginPostRequest 
     * @param {string} [authorization] Optional bearer token for authorization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalApi
     */
    public externalLoginPost(externalLoginPostRequest: ExternalLoginPostRequest, authorization?: string, options?: RawAxiosRequestConfig) {
        return ExternalApiFp(this.configuration).externalLoginPost(externalLoginPostRequest, authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Signup a new user
     * @param {ExternalSignupPostRequest} externalSignupPostRequest 
     * @param {string} [authorization] Optional bearer token for authorization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalApi
     */
    public externalSignupPost(externalSignupPostRequest: ExternalSignupPostRequest, authorization?: string, options?: RawAxiosRequestConfig) {
        return ExternalApiFp(this.configuration).externalSignupPost(externalSignupPostRequest, authorization, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ThesisApi - axios parameter creator
 * @export
 */
export const ThesisApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new thesis
         * @param {ProfessorThesisPostRequest} professorThesisPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        professorThesisPost: async (professorThesisPostRequest: ProfessorThesisPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'professorThesisPostRequest' is not null or undefined
            assertParamExists('professorThesisPost', 'professorThesisPostRequest', professorThesisPostRequest)
            const localVarPath = `/professor/thesis`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(professorThesisPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ThesisApi - functional programming interface
 * @export
 */
export const ThesisApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ThesisApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new thesis
         * @param {ProfessorThesisPostRequest} professorThesisPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async professorThesisPost(professorThesisPostRequest: ProfessorThesisPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfessorThesisPost201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.professorThesisPost(professorThesisPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ThesisApi.professorThesisPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ThesisApi - factory interface
 * @export
 */
export const ThesisApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ThesisApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new thesis
         * @param {ProfessorThesisPostRequest} professorThesisPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        professorThesisPost(professorThesisPostRequest: ProfessorThesisPostRequest, options?: any): AxiosPromise<ProfessorThesisPost201Response> {
            return localVarFp.professorThesisPost(professorThesisPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ThesisApi - object-oriented interface
 * @export
 * @class ThesisApi
 * @extends {BaseAPI}
 */
export class ThesisApi extends BaseAPI {
    /**
     * 
     * @summary Create a new thesis
     * @param {ProfessorThesisPostRequest} professorThesisPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThesisApi
     */
    public professorThesisPost(professorThesisPostRequest: ProfessorThesisPostRequest, options?: RawAxiosRequestConfig) {
        return ThesisApiFp(this.configuration).professorThesisPost(professorThesisPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



