/* tslint:disable */
/* eslint-disable */
/**
 * Your API
 * Your API documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AdminExternalGet200Response
 */
export interface AdminExternalGet200Response {
    /**
     * 
     * @type {Array<AdminExternalGet200ResponseDocsInner>}
     * @memberof AdminExternalGet200Response
     */
    'docs'?: Array<AdminExternalGet200ResponseDocsInner>;
    /**
     * 
     * @type {number}
     * @memberof AdminExternalGet200Response
     */
    'count'?: number;
    /**
     * 
     * @type {number}
     * @memberof AdminExternalGet200Response
     */
    'pages'?: number;
}
/**
 * 
 * @export
 * @interface AdminExternalGet200ResponseDocsInner
 */
export interface AdminExternalGet200ResponseDocsInner {
    /**
     * 
     * @type {string}
     * @memberof AdminExternalGet200ResponseDocsInner
     */
    '_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminExternalGet200ResponseDocsInner
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminExternalGet200ResponseDocsInner
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminExternalGet200ResponseDocsInner
     */
    'lastname'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminExternalGet200ResponseDocsInner
     */
    'role'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AdminExternalGet200ResponseDocsInner
     */
    'active'?: boolean;
}
/**
 * 
 * @export
 * @interface AdminUniversityPost200Response
 */
export interface AdminUniversityPost200Response {
    /**
     * 
     * @type {string}
     * @memberof AdminUniversityPost200Response
     */
    '_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUniversityPost200Response
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface AdminUniversityPost500Response
 */
export interface AdminUniversityPost500Response {
    /**
     * 
     * @type {string}
     * @memberof AdminUniversityPost500Response
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUniversityPost500Response
     */
    'error'?: string;
}
/**
 * 
 * @export
 * @interface AdminUniversityPostRequest
 */
export interface AdminUniversityPostRequest {
    /**
     * The name of the university
     * @type {string}
     * @memberof AdminUniversityPostRequest
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface AdminUserPost201Response
 */
export interface AdminUserPost201Response {
    /**
     * 
     * @type {string}
     * @memberof AdminUserPost201Response
     */
    'message'?: string;
    /**
     * 
     * @type {AdminUserPost201ResponseUser}
     * @memberof AdminUserPost201Response
     */
    'user'?: AdminUserPost201ResponseUser;
}
/**
 * 
 * @export
 * @interface AdminUserPost201ResponseUser
 */
export interface AdminUserPost201ResponseUser {
    /**
     * 
     * @type {string}
     * @memberof AdminUserPost201ResponseUser
     */
    '_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserPost201ResponseUser
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserPost201ResponseUser
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserPost201ResponseUser
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserPost201ResponseUser
     */
    'lastname'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserPost201ResponseUser
     */
    'role'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserPost201ResponseUser
     */
    'university'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserPost201ResponseUser
     */
    'imageprofile'?: string;
}
/**
 * 
 * @export
 * @interface AdminUserPostRequest
 */
export interface AdminUserPostRequest {
    /**
     * The email of the user
     * @type {string}
     * @memberof AdminUserPostRequest
     */
    'email': string;
    /**
     * The password of the user
     * @type {string}
     * @memberof AdminUserPostRequest
     */
    'password': string;
    /**
     * The first name of the user
     * @type {string}
     * @memberof AdminUserPostRequest
     */
    'name'?: string;
    /**
     * The last name of the user
     * @type {string}
     * @memberof AdminUserPostRequest
     */
    'lastname'?: string;
    /**
     * The role of the user
     * @type {string}
     * @memberof AdminUserPostRequest
     */
    'role'?: AdminUserPostRequestRoleEnum;
    /**
     * The ID of the university
     * @type {string}
     * @memberof AdminUserPostRequest
     */
    'university'?: string;
    /**
     * The URL of the user\'s profile image
     * @type {string}
     * @memberof AdminUserPostRequest
     */
    'imageprofile'?: string;
}

export const AdminUserPostRequestRoleEnum = {
    Guest: 'Guest',
    Admin: 'Admin',
    Professor: 'Professor',
    Student: 'Student',
    Secretariat: 'Secretariat'
} as const;

export type AdminUserPostRequestRoleEnum = typeof AdminUserPostRequestRoleEnum[keyof typeof AdminUserPostRequestRoleEnum];

/**
 * 
 * @export
 * @interface AdminUserRoleGet200Response
 */
export interface AdminUserRoleGet200Response {
    /**
     * 
     * @type {Array<AdminUserRoleGet200ResponseDocsInner>}
     * @memberof AdminUserRoleGet200Response
     */
    'docs'?: Array<AdminUserRoleGet200ResponseDocsInner>;
    /**
     * 
     * @type {number}
     * @memberof AdminUserRoleGet200Response
     */
    'count'?: number;
    /**
     * 
     * @type {number}
     * @memberof AdminUserRoleGet200Response
     */
    'pages'?: number;
}
/**
 * 
 * @export
 * @interface AdminUserRoleGet200ResponseDocsInner
 */
export interface AdminUserRoleGet200ResponseDocsInner {
    /**
     * 
     * @type {string}
     * @memberof AdminUserRoleGet200ResponseDocsInner
     */
    '_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserRoleGet200ResponseDocsInner
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserRoleGet200ResponseDocsInner
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserRoleGet200ResponseDocsInner
     */
    'lastname'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserRoleGet200ResponseDocsInner
     */
    'role'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserRoleGet200ResponseDocsInner
     */
    'university'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserRoleGet200ResponseDocsInner
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserRoleGet200ResponseDocsInner
     */
    'imageprofile'?: string;
}
/**
 * 
 * @export
 * @interface AdminUserRoleGet400Response
 */
export interface AdminUserRoleGet400Response {
    /**
     * 
     * @type {string}
     * @memberof AdminUserRoleGet400Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface AdminUserRoleGet404Response
 */
export interface AdminUserRoleGet404Response {
    /**
     * 
     * @type {string}
     * @memberof AdminUserRoleGet404Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface AdminUserRoleGet500Response
 */
export interface AdminUserRoleGet500Response {
    /**
     * 
     * @type {string}
     * @memberof AdminUserRoleGet500Response
     */
    'error'?: string;
}
/**
 * 
 * @export
 * @interface AdminUserUserIdDelete200Response
 */
export interface AdminUserUserIdDelete200Response {
    /**
     * 
     * @type {string}
     * @memberof AdminUserUserIdDelete200Response
     */
    '_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserUserIdDelete200Response
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserUserIdDelete200Response
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserUserIdDelete200Response
     */
    'lastname'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserUserIdDelete200Response
     */
    'role'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserUserIdDelete200Response
     */
    'university'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserUserIdDelete200Response
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserUserIdDelete200Response
     */
    'imageprofile'?: string;
}
/**
 * 
 * @export
 * @interface AdminUserUserIdPut200Response
 */
export interface AdminUserUserIdPut200Response {
    /**
     * 
     * @type {string}
     * @memberof AdminUserUserIdPut200Response
     */
    '_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserUserIdPut200Response
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserUserIdPut200Response
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserUserIdPut200Response
     */
    'lastname'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserUserIdPut200Response
     */
    'role'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserUserIdPut200Response
     */
    'university'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserUserIdPut200Response
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserUserIdPut200Response
     */
    'imageprofile'?: string;
}
/**
 * 
 * @export
 * @interface AdminUserUserIdPutRequest
 */
export interface AdminUserUserIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof AdminUserUserIdPutRequest
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserUserIdPutRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserUserIdPutRequest
     */
    'lastname'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserUserIdPutRequest
     */
    'role'?: AdminUserUserIdPutRequestRoleEnum;
    /**
     * 
     * @type {string}
     * @memberof AdminUserUserIdPutRequest
     */
    'university'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserUserIdPutRequest
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserUserIdPutRequest
     */
    'imageprofile'?: string;
}

export const AdminUserUserIdPutRequestRoleEnum = {
    Guest: 'Guest',
    Admin: 'Admin',
    Professor: 'Professor',
    Student: 'Student',
    Secretariat: 'Secretariat'
} as const;

export type AdminUserUserIdPutRequestRoleEnum = typeof AdminUserUserIdPutRequestRoleEnum[keyof typeof AdminUserUserIdPutRequestRoleEnum];

/**
 * 
 * @export
 * @interface ExternalLoginPostRequest
 */
export interface ExternalLoginPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ExternalLoginPostRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof ExternalLoginPostRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface ExternalSignupPostRequest
 */
export interface ExternalSignupPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ExternalSignupPostRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof ExternalSignupPostRequest
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof ExternalSignupPostRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ExternalSignupPostRequest
     */
    'lastname': string;
}
/**
 * 
 * @export
 * @interface ProfessorThesisPost201Response
 */
export interface ProfessorThesisPost201Response {
    /**
     * 
     * @type {string}
     * @memberof ProfessorThesisPost201Response
     */
    'message'?: string;
    /**
     * 
     * @type {Thesis}
     * @memberof ProfessorThesisPost201Response
     */
    'thesis'?: Thesis;
}
/**
 * 
 * @export
 * @interface ProfessorThesisPostRequest
 */
export interface ProfessorThesisPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ProfessorThesisPostRequest
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof ProfessorThesisPostRequest
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfessorThesisPostRequest
     */
    'prerequisites'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProfessorThesisPostRequest
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ProfessorThesisPostRequest
     */
    'university': string;
    /**
     * 
     * @type {string}
     * @memberof ProfessorThesisPostRequest
     */
    'professor': string;
    /**
     * 
     * @type {string}
     * @memberof ProfessorThesisPostRequest
     */
    'creator_student'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfessorThesisPostRequest
     */
    'creator_external'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfessorThesisPostRequest
     */
    'images'?: string;
}
/**
 * 
 * @export
 * @interface Thesis
 */
export interface Thesis {
    /**
     * 
     * @type {string}
     * @memberof Thesis
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Thesis
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Thesis
     */
    'prerequisites'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Thesis
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Thesis
     */
    'university': string;
    /**
     * 
     * @type {string}
     * @memberof Thesis
     */
    'professor': string;
    /**
     * 
     * @type {string}
     * @memberof Thesis
     */
    'creator_student'?: string;
    /**
     * 
     * @type {string}
     * @memberof Thesis
     */
    'creator_external'?: string;
    /**
     * 
     * @type {string}
     * @memberof Thesis
     */
    'images'?: string;
}
/**
 * 
 * @export
 * @interface UniversityCreatePost201Response
 */
export interface UniversityCreatePost201Response {
    /**
     * 
     * @type {string}
     * @memberof UniversityCreatePost201Response
     */
    'message'?: string;
    /**
     * 
     * @type {AdminUniversityPost200Response}
     * @memberof UniversityCreatePost201Response
     */
    'data'?: AdminUniversityPost200Response;
}
/**
 * 
 * @export
 * @interface UniversityCreatePost400Response
 */
export interface UniversityCreatePost400Response {
    /**
     * 
     * @type {string}
     * @memberof UniversityCreatePost400Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface UniversityCreatePost500Response
 */
export interface UniversityCreatePost500Response {
    /**
     * 
     * @type {string}
     * @memberof UniversityCreatePost500Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface UniversityGetGet200Response
 */
export interface UniversityGetGet200Response {
    /**
     * 
     * @type {Array<UniversityGetGet200ResponseDocsInner>}
     * @memberof UniversityGetGet200Response
     */
    'docs'?: Array<UniversityGetGet200ResponseDocsInner>;
    /**
     * 
     * @type {number}
     * @memberof UniversityGetGet200Response
     */
    'count'?: number;
    /**
     * 
     * @type {number}
     * @memberof UniversityGetGet200Response
     */
    'pages'?: number;
}
/**
 * 
 * @export
 * @interface UniversityGetGet200ResponseDocsInner
 */
export interface UniversityGetGet200ResponseDocsInner {
    /**
     * 
     * @type {string}
     * @memberof UniversityGetGet200ResponseDocsInner
     */
    '_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UniversityGetGet200ResponseDocsInner
     */
    'name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UniversityGetGet200ResponseDocsInner
     */
    'pending'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UniversityGetGet200ResponseDocsInner
     */
    'university'?: string;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Check authentication
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authCheckGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Check if user is a professor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authIsProfessorGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/is-professor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Check authentication
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authCheckGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authCheckGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authCheckGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Check if user is a professor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authIsProfessorGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authIsProfessorGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authIsProfessorGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary Check authentication
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authCheckGet(options?: any): AxiosPromise<void> {
            return localVarFp.authCheckGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Check if user is a professor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authIsProfessorGet(options?: any): AxiosPromise<void> {
            return localVarFp.authIsProfessorGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary Check authentication
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authCheckGet(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authCheckGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Check if user is a professor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authIsProfessorGet(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authIsProfessorGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ExternalApi - axios parameter creator
 * @export
 */
export const ExternalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Activate an external user
         * @param {string} externalId The ID of the external user to activate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminExternalActivateExternalIdPatch: async (externalId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'externalId' is not null or undefined
            assertParamExists('adminExternalActivateExternalIdPatch', 'externalId', externalId)
            const localVarPath = `/admin/external/activate/{externalId}`
                .replace(`{${"externalId"}}`, encodeURIComponent(String(externalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a list of external users
         * @param {number} [page] The page number to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminExternalGet: async (page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/external`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary user login
         * @param {ExternalLoginPostRequest} externalLoginPostRequest 
         * @param {string} [authorization] Optional bearer token for authorization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        externalLoginPost: async (externalLoginPostRequest: ExternalLoginPostRequest, authorization?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'externalLoginPostRequest' is not null or undefined
            assertParamExists('externalLoginPost', 'externalLoginPostRequest', externalLoginPostRequest)
            const localVarPath = `/external/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(externalLoginPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Signup a new user
         * @param {ExternalSignupPostRequest} externalSignupPostRequest 
         * @param {string} [authorization] Optional bearer token for authorization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        externalSignupPost: async (externalSignupPostRequest: ExternalSignupPostRequest, authorization?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'externalSignupPostRequest' is not null or undefined
            assertParamExists('externalSignupPost', 'externalSignupPostRequest', externalSignupPostRequest)
            const localVarPath = `/external/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(externalSignupPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExternalApi - functional programming interface
 * @export
 */
export const ExternalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExternalApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Activate an external user
         * @param {string} externalId The ID of the external user to activate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminExternalActivateExternalIdPatch(externalId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminExternalGet200ResponseDocsInner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminExternalActivateExternalIdPatch(externalId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExternalApi.adminExternalActivateExternalIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve a list of external users
         * @param {number} [page] The page number to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminExternalGet(page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminExternalGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminExternalGet(page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExternalApi.adminExternalGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary user login
         * @param {ExternalLoginPostRequest} externalLoginPostRequest 
         * @param {string} [authorization] Optional bearer token for authorization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async externalLoginPost(externalLoginPostRequest: ExternalLoginPostRequest, authorization?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.externalLoginPost(externalLoginPostRequest, authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExternalApi.externalLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Signup a new user
         * @param {ExternalSignupPostRequest} externalSignupPostRequest 
         * @param {string} [authorization] Optional bearer token for authorization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async externalSignupPost(externalSignupPostRequest: ExternalSignupPostRequest, authorization?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.externalSignupPost(externalSignupPostRequest, authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExternalApi.externalSignupPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ExternalApi - factory interface
 * @export
 */
export const ExternalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExternalApiFp(configuration)
    return {
        /**
         * 
         * @summary Activate an external user
         * @param {string} externalId The ID of the external user to activate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminExternalActivateExternalIdPatch(externalId: string, options?: any): AxiosPromise<AdminExternalGet200ResponseDocsInner> {
            return localVarFp.adminExternalActivateExternalIdPatch(externalId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a list of external users
         * @param {number} [page] The page number to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminExternalGet(page?: number, options?: any): AxiosPromise<AdminExternalGet200Response> {
            return localVarFp.adminExternalGet(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary user login
         * @param {ExternalLoginPostRequest} externalLoginPostRequest 
         * @param {string} [authorization] Optional bearer token for authorization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        externalLoginPost(externalLoginPostRequest: ExternalLoginPostRequest, authorization?: string, options?: any): AxiosPromise<void> {
            return localVarFp.externalLoginPost(externalLoginPostRequest, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Signup a new user
         * @param {ExternalSignupPostRequest} externalSignupPostRequest 
         * @param {string} [authorization] Optional bearer token for authorization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        externalSignupPost(externalSignupPostRequest: ExternalSignupPostRequest, authorization?: string, options?: any): AxiosPromise<void> {
            return localVarFp.externalSignupPost(externalSignupPostRequest, authorization, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExternalApi - object-oriented interface
 * @export
 * @class ExternalApi
 * @extends {BaseAPI}
 */
export class ExternalApi extends BaseAPI {
    /**
     * 
     * @summary Activate an external user
     * @param {string} externalId The ID of the external user to activate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalApi
     */
    public adminExternalActivateExternalIdPatch(externalId: string, options?: RawAxiosRequestConfig) {
        return ExternalApiFp(this.configuration).adminExternalActivateExternalIdPatch(externalId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve a list of external users
     * @param {number} [page] The page number to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalApi
     */
    public adminExternalGet(page?: number, options?: RawAxiosRequestConfig) {
        return ExternalApiFp(this.configuration).adminExternalGet(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary user login
     * @param {ExternalLoginPostRequest} externalLoginPostRequest 
     * @param {string} [authorization] Optional bearer token for authorization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalApi
     */
    public externalLoginPost(externalLoginPostRequest: ExternalLoginPostRequest, authorization?: string, options?: RawAxiosRequestConfig) {
        return ExternalApiFp(this.configuration).externalLoginPost(externalLoginPostRequest, authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Signup a new user
     * @param {ExternalSignupPostRequest} externalSignupPostRequest 
     * @param {string} [authorization] Optional bearer token for authorization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalApi
     */
    public externalSignupPost(externalSignupPostRequest: ExternalSignupPostRequest, authorization?: string, options?: RawAxiosRequestConfig) {
        return ExternalApiFp(this.configuration).externalSignupPost(externalSignupPostRequest, authorization, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ThesisApi - axios parameter creator
 * @export
 */
export const ThesisApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new thesis
         * @param {ProfessorThesisPostRequest} professorThesisPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        professorThesisPost: async (professorThesisPostRequest: ProfessorThesisPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'professorThesisPostRequest' is not null or undefined
            assertParamExists('professorThesisPost', 'professorThesisPostRequest', professorThesisPostRequest)
            const localVarPath = `/professor/thesis`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(professorThesisPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ThesisApi - functional programming interface
 * @export
 */
export const ThesisApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ThesisApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new thesis
         * @param {ProfessorThesisPostRequest} professorThesisPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async professorThesisPost(professorThesisPostRequest: ProfessorThesisPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfessorThesisPost201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.professorThesisPost(professorThesisPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ThesisApi.professorThesisPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ThesisApi - factory interface
 * @export
 */
export const ThesisApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ThesisApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new thesis
         * @param {ProfessorThesisPostRequest} professorThesisPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        professorThesisPost(professorThesisPostRequest: ProfessorThesisPostRequest, options?: any): AxiosPromise<ProfessorThesisPost201Response> {
            return localVarFp.professorThesisPost(professorThesisPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ThesisApi - object-oriented interface
 * @export
 * @class ThesisApi
 * @extends {BaseAPI}
 */
export class ThesisApi extends BaseAPI {
    /**
     * 
     * @summary Create a new thesis
     * @param {ProfessorThesisPostRequest} professorThesisPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThesisApi
     */
    public professorThesisPost(professorThesisPostRequest: ProfessorThesisPostRequest, options?: RawAxiosRequestConfig) {
        return ThesisApiFp(this.configuration).professorThesisPost(professorThesisPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UniversityApi - axios parameter creator
 * @export
 */
export const UniversityApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new university
         * @param {AdminUniversityPostRequest} adminUniversityPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUniversityPost: async (adminUniversityPostRequest: AdminUniversityPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminUniversityPostRequest' is not null or undefined
            assertParamExists('adminUniversityPost', 'adminUniversityPostRequest', adminUniversityPostRequest)
            const localVarPath = `/admin/university`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminUniversityPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new university
         * @param {AdminUniversityPostRequest} adminUniversityPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        universityCreatePost: async (adminUniversityPostRequest: AdminUniversityPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminUniversityPostRequest' is not null or undefined
            assertParamExists('universityCreatePost', 'adminUniversityPostRequest', adminUniversityPostRequest)
            const localVarPath = `/university/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminUniversityPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a list of universities
         * @param {number} [page] The page number to retrieve
         * @param {string} [university] The university to filter by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        universityGetGet: async (page?: number, university?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/university/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (university !== undefined) {
                localVarQueryParameter['university'] = university;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UniversityApi - functional programming interface
 * @export
 */
export const UniversityApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UniversityApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new university
         * @param {AdminUniversityPostRequest} adminUniversityPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminUniversityPost(adminUniversityPostRequest: AdminUniversityPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminUniversityPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminUniversityPost(adminUniversityPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UniversityApi.adminUniversityPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a new university
         * @param {AdminUniversityPostRequest} adminUniversityPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async universityCreatePost(adminUniversityPostRequest: AdminUniversityPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UniversityCreatePost201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.universityCreatePost(adminUniversityPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UniversityApi.universityCreatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve a list of universities
         * @param {number} [page] The page number to retrieve
         * @param {string} [university] The university to filter by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async universityGetGet(page?: number, university?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UniversityGetGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.universityGetGet(page, university, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UniversityApi.universityGetGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UniversityApi - factory interface
 * @export
 */
export const UniversityApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UniversityApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new university
         * @param {AdminUniversityPostRequest} adminUniversityPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUniversityPost(adminUniversityPostRequest: AdminUniversityPostRequest, options?: any): AxiosPromise<AdminUniversityPost200Response> {
            return localVarFp.adminUniversityPost(adminUniversityPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new university
         * @param {AdminUniversityPostRequest} adminUniversityPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        universityCreatePost(adminUniversityPostRequest: AdminUniversityPostRequest, options?: any): AxiosPromise<UniversityCreatePost201Response> {
            return localVarFp.universityCreatePost(adminUniversityPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a list of universities
         * @param {number} [page] The page number to retrieve
         * @param {string} [university] The university to filter by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        universityGetGet(page?: number, university?: string, options?: any): AxiosPromise<UniversityGetGet200Response> {
            return localVarFp.universityGetGet(page, university, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UniversityApi - object-oriented interface
 * @export
 * @class UniversityApi
 * @extends {BaseAPI}
 */
export class UniversityApi extends BaseAPI {
    /**
     * 
     * @summary Create a new university
     * @param {AdminUniversityPostRequest} adminUniversityPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UniversityApi
     */
    public adminUniversityPost(adminUniversityPostRequest: AdminUniversityPostRequest, options?: RawAxiosRequestConfig) {
        return UniversityApiFp(this.configuration).adminUniversityPost(adminUniversityPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new university
     * @param {AdminUniversityPostRequest} adminUniversityPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UniversityApi
     */
    public universityCreatePost(adminUniversityPostRequest: AdminUniversityPostRequest, options?: RawAxiosRequestConfig) {
        return UniversityApiFp(this.configuration).universityCreatePost(adminUniversityPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve a list of universities
     * @param {number} [page] The page number to retrieve
     * @param {string} [university] The university to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UniversityApi
     */
    public universityGetGet(page?: number, university?: string, options?: RawAxiosRequestConfig) {
        return UniversityApiFp(this.configuration).universityGetGet(page, university, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new user
         * @param {AdminUserPostRequest} adminUserPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUserPost: async (adminUserPostRequest: AdminUserPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminUserPostRequest' is not null or undefined
            assertParamExists('adminUserPost', 'adminUserPostRequest', adminUserPostRequest)
            const localVarPath = `/admin/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminUserPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a list of users by role
         * @param {AdminUserRoleGetRoleEnum} role The role of the users to retrieve (e.g., Professor, Student, Secretariat)
         * @param {number} [page] The page number for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUserRoleGet: async (role: AdminUserRoleGetRoleEnum, page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'role' is not null or undefined
            assertParamExists('adminUserRoleGet', 'role', role)
            const localVarPath = `/admin/user/{role}`
                .replace(`{${"role"}}`, encodeURIComponent(String(role)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a user by ID
         * @param {string} userId The ID of the user to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUserUserIdDelete: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('adminUserUserIdDelete', 'userId', userId)
            const localVarPath = `/admin/user/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a user by ID
         * @param {string} userId The ID of the user to update
         * @param {AdminUserUserIdPutRequest} adminUserUserIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUserUserIdPut: async (userId: string, adminUserUserIdPutRequest: AdminUserUserIdPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('adminUserUserIdPut', 'userId', userId)
            // verify required parameter 'adminUserUserIdPutRequest' is not null or undefined
            assertParamExists('adminUserUserIdPut', 'adminUserUserIdPutRequest', adminUserUserIdPutRequest)
            const localVarPath = `/admin/user/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminUserUserIdPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new user
         * @param {AdminUserPostRequest} adminUserPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminUserPost(adminUserPostRequest: AdminUserPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminUserPost201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminUserPost(adminUserPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.adminUserPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve a list of users by role
         * @param {AdminUserRoleGetRoleEnum} role The role of the users to retrieve (e.g., Professor, Student, Secretariat)
         * @param {number} [page] The page number for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminUserRoleGet(role: AdminUserRoleGetRoleEnum, page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminUserRoleGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminUserRoleGet(role, page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.adminUserRoleGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a user by ID
         * @param {string} userId The ID of the user to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminUserUserIdDelete(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminUserUserIdDelete200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminUserUserIdDelete(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.adminUserUserIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a user by ID
         * @param {string} userId The ID of the user to update
         * @param {AdminUserUserIdPutRequest} adminUserUserIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminUserUserIdPut(userId: string, adminUserUserIdPutRequest: AdminUserUserIdPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminUserUserIdPut200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminUserUserIdPut(userId, adminUserUserIdPutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.adminUserUserIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new user
         * @param {AdminUserPostRequest} adminUserPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUserPost(adminUserPostRequest: AdminUserPostRequest, options?: any): AxiosPromise<AdminUserPost201Response> {
            return localVarFp.adminUserPost(adminUserPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a list of users by role
         * @param {AdminUserRoleGetRoleEnum} role The role of the users to retrieve (e.g., Professor, Student, Secretariat)
         * @param {number} [page] The page number for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUserRoleGet(role: AdminUserRoleGetRoleEnum, page?: number, options?: any): AxiosPromise<AdminUserRoleGet200Response> {
            return localVarFp.adminUserRoleGet(role, page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a user by ID
         * @param {string} userId The ID of the user to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUserUserIdDelete(userId: string, options?: any): AxiosPromise<AdminUserUserIdDelete200Response> {
            return localVarFp.adminUserUserIdDelete(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a user by ID
         * @param {string} userId The ID of the user to update
         * @param {AdminUserUserIdPutRequest} adminUserUserIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUserUserIdPut(userId: string, adminUserUserIdPutRequest: AdminUserUserIdPutRequest, options?: any): AxiosPromise<AdminUserUserIdPut200Response> {
            return localVarFp.adminUserUserIdPut(userId, adminUserUserIdPutRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary Create a new user
     * @param {AdminUserPostRequest} adminUserPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public adminUserPost(adminUserPostRequest: AdminUserPostRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).adminUserPost(adminUserPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve a list of users by role
     * @param {AdminUserRoleGetRoleEnum} role The role of the users to retrieve (e.g., Professor, Student, Secretariat)
     * @param {number} [page] The page number for pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public adminUserRoleGet(role: AdminUserRoleGetRoleEnum, page?: number, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).adminUserRoleGet(role, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a user by ID
     * @param {string} userId The ID of the user to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public adminUserUserIdDelete(userId: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).adminUserUserIdDelete(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a user by ID
     * @param {string} userId The ID of the user to update
     * @param {AdminUserUserIdPutRequest} adminUserUserIdPutRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public adminUserUserIdPut(userId: string, adminUserUserIdPutRequest: AdminUserUserIdPutRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).adminUserUserIdPut(userId, adminUserUserIdPutRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const AdminUserRoleGetRoleEnum = {
    Professor: 'Professor',
    Student: 'Student',
    Secretariat: 'Secretariat'
} as const;
export type AdminUserRoleGetRoleEnum = typeof AdminUserRoleGetRoleEnum[keyof typeof AdminUserRoleGetRoleEnum];


